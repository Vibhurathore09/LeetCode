class Solution {
    public boolean isSafe(int row , int col , char[][]board){
        for(int i = row-1 , j = col-1 ; i >=0 && j >=0 ; i--,j--){ // upper left
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        for(int i = row+1 , j=col-1 ; i<board.length && j>=0 ; i++ , j--){//lower left
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        for(int i = col ; i>=0 ; i--){ //left
            if(board[row][i] == 'Q'){
                return false;
            }
        }
        return true;
        
    }
    public void safeBoard(char[][]board , List<List<String>> chess){
        String row = "";
        List<String> newboard = new ArrayList<String>();
        
        for(int i = 0 ; i < board.length ; i++){
            row = "";
            for(int j = 0 ; j < board.length ; j++){
                if(board[i][j] == 'Q'){
                    row+='Q';
                }else{
                    row+='.';
                }
                // row+='.';
            }
            newboard.add(row);
        }
        chess.add(newboard);
    }
    
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> chess = new ArrayList<>();
        char[][] board = new char[n][n];
        helper(board , chess , 0);
        return chess;
    }
    
    public void helper(char[][]board , List<List<String>> chess , int col){
        if(col == board.length){
            safeBoard(board , chess);
            return;
        }
        
        for(int row = 0 ; row < board.length; row++){
            if(isSafe(row , col , board)){
                board[row][col] = 'Q';
                helper(board , chess , col+1);
                board[row][col] = '.';
            }
        }
    }
}
