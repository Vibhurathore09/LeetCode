class Solution {
    public int search(int[] arr, int target) {
        int n = arr.length;
        int pivot = findpivot(arr, 0 , n-1);
        if(pivot == -1)
        {
            return binarysearch(arr , 0 , n-1 ,target);
        }
        if( arr[pivot]== target)
            return pivot;
        if(arr[0] <= target)
            return binarysearch(arr , 0 , pivot - 1  ,target);
        return binarysearch(arr , pivot +1, n-1 , target);
    }
    public int findpivot(int [] arr , int low  , int high)
    {
        if (high < low)
            return -1;
        if (high == low)
            return low;
        int mid = (low + high) / 2;
        if (mid < high && arr[mid] > arr[mid + 1])
            return mid;
        if (mid > low && arr[mid] < arr[mid - 1])
            return (mid - 1);
        if (arr[low] >= arr[mid])
            return findpivot(arr, low, mid - 1);
        return findpivot(arr, mid + 1, high);
    }
     public  int binarysearch(int arr[], int low, int high, int key)
    {
        if (high < low)
            return -1;
 
        /* low + (high - low)/2; */
        int mid = (low + high) / 2;
        if (key == arr[mid])
            return mid;
        if (key > arr[mid])
            return binarysearch(arr, (mid + 1), high, key);
        return binarysearch(arr, low, (mid - 1), key);
    }
}
